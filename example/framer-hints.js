// Generated by CoffeeScript 1.7.1
(function() {
  var config, createHintForLayer, createHints, defaults, destroyHints, eventsToWatchFor, flashHints, hideHints, hints, shouldHintLayer, showHints;

  defaults = {
    enabled: true,
    triggerKeyCode: 16,
    flashHintsOnUnhandledTaps: true,
    color: 'rgba(0,150,200, 0.3)',
    style: {
      boxShadow: 'inset 0 0 0 2px rgba(255, 255, 255, 0.5), 0 2px 4px rgba(0, 0, 0, 0.35)'
    }
  };

  config = _.extend(defaults, window.FramerHintsConfig || {});

  hints = [];

  eventsToWatchFor = [Events.Click, Events.TouchStart, Events.TouchEnd, Events.TouchMove, Events.DragStart, Events.DragMove, Events.DragMove, Events.MouseOver, Events.MouseOut];

  createHintForLayer = function(layer) {
    var hintLayer;
    hintLayer = new Layer({
      frame: layer.screenFrame,
      scale: layer.scale * 0.85,
      backgroundColor: config.color,
      opacity: 0
    });
    hintLayer.layer = layer;
    hintLayer.style = config.style;
    hintLayer.ignoreEvents = true;
    return hintLayer;
  };

  shouldHintLayer = function(layer) {
    var keys;
    if (!(layer.visible && layer._eventListeners)) {
      return false;
    }
    keys = Object.keys(layer._eventListeners);
    return _.any(keys, (function(k) {
      return layer._eventListeners[k].length > 0 && _.contains(eventsToWatchFor, k);
    }));
  };

  createHints = function() {
    var layer;
    destroyHints();
    return hints = (function() {
      var _i, _len, _ref, _results;
      _ref = Framer.CurrentContext.getLayers();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        if (shouldHintLayer(layer)) {
          _results.push(createHintForLayer(layer));
        }
      }
      return _results;
    })();
  };

  showHints = function() {
    if (!config.enabled) {
      return;
    }
    createHints();
    return hints.forEach(function(hint) {
      return hint.animate({
        properties: {
          opacity: 1,
          scale: hint.layer.scale
        },
        curve: 'spring(200,30,20)'
      });
    });
  };

  flashHints = function() {
    createHints();
    return hints.forEach(function(hint) {
      hint.scale = hint.layer.scale;
      hint.animate({
        properties: {
          opacity: 1
        },
        curve: 'linear',
        time: 0.2
      });
      return hint.once('end', function() {
        hint.animate({
          properties: {
            opacity: 0,
            scale: hint.layer.scale * 0.95
          },
          curve: 'cubic-bezier',
          curveOptions: {
            time: 0.35
          }
        });
        return hint.once('end', function() {
          return hint.destroy();
        });
      });
    });
  };

  destroyHints = function() {
    var hint, _i, _len;
    for (_i = 0, _len = hints.length; _i < _len; _i++) {
      hint = hints[_i];
      hint.destroy();
    }
    return hints = [];
  };

  hideHints = destroyHints;

  document.addEventListener('keydown', function(event) {
    if (event.which === config.triggerKeyCode) {
      return showHints();
    }
  });

  document.addEventListener('keyup', function(event) {
    return hideHints();
  });

  document.addEventListener(Events.TouchEnd, function(event) {
    var layer, point, scale, xOffset, yOffset, _i, _len, _ref, _ref1;
    if (!config.flashHintsOnUnhandledTaps) {
      return;
    }
    event = Events.touchEvent(event);
    scale = ((_ref = Framer.Device) != null ? _ref.phone.scale : void 0) || 1;
    xOffset = (Canvas.size.width - Screen.size.width * scale) / 2;
    yOffset = (Canvas.size.height - Screen.size.height * scale) / 2;
    point = {
      x: (event.clientX + window.pageXOffset - xOffset) / scale,
      y: (event.clientY + window.pageYOffset - yOffset) / scale
    };
    _ref1 = Framer.CurrentContext.getLayers();
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      layer = _ref1[_i];
      if (shouldHintLayer(layer)) {
        if (Utils.pointInFrame(point, layer.screenFrame)) {
          return;
        }
      }
    }
    return flashHints();
  });

  Framer.Hints = {
    show: showHints,
    hide: hideHints,
    flash: flashHints,
    config: config
  };

  if (typeof exports !== "undefined" && exports !== null) {
    exports.hints = Framer.Hints;
  }

}).call(this);
